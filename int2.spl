alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
.
// Get system call no. from the stack and put it in a register
// Get arguments from stack and put it in registers
.

alias sysCallNo S1;
sysCallNo=[physicalSP-1];

if ( sysCallNo == 2) then
	// Implementation of Open
	//find if flename exists in fat entry
	alias filename S2;
	filename = [physicalSP-3];
	alias fatcount S3;
	fatcount=0;
	alias fatindex S4;

	while(fatcount <  512  ) do
		if([FAT + fatcount] == filename) then
			fatindex=fatcount/8;
			break;	
		endif;
		fatcount=fatcount+8;
	endwhile;
	//return -1 if it does not exist
	if(fatcount==512) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	alias filecount S5; 	
	filecount=0;
	alias swfileindex S6;
		//check if file entry in system wide open file table
	while(filecount<128) do
		//file already opened
		if([FILE_TABLE + filecount]==fatindex) then 
		 	swfileindex=filecount/2;
			break;
		endif;	
		if([FILE_TABLE +filecount] ==-1) then
			swfileindex=filecount/2;
			break;
		endif;
		filecount=filecount+2;
	endwhile;
	
	
	//if there are no unused space and file is not already opened
	if(filecount==128) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	alias currentPCB S7;
	
	currentPCB = READY_LIST + 32 * ((PTBR - 1024) / 8);
	alias count S9;
	
	count=15;
	//search per process open file table of current process
	while(count < 31) do
		if([count+ currentPCB]==-1) then
			[count + currentPCB] = swfileindex;
			[count + currentPCB + 1] = 0;
			break;
		endif;
		count=count + 2;
	endwhile;
	
	if(count>=31) then
		[physicalSP-2]=-1;
		ireturn;
	endif;
	if([swfileindex*2 + FILE_TABLE] ==-1) then
		[swfileindex*2 + FILE_TABLE]=fatindex;
		[swfileindex*2 + FILE_TABLE + 1 ]=1;
	else
		
		[swfileindex*2 + FILE_TABLE + 1] = [swfileindex*2 + FILE_TABLE + 1] + 1;
	endif;
	
	[physicalSP - 2]= (count - 15 )/2;
	ireturn;
endif;


if(sysCallNo==3) then
	 alias filedescriptor S2;
	 filedescriptor = [physicalSP - 3];
	 if(filedescriptor<0||filedescriptor>7) then
  		[physicalSP-2]=-1;
  		ireturn;
  	endif;
	alias currentPCB S3;
	currentPCB = READY_LIST + 32 *((PTBR-1024)/8);
	alias pointer S4;
	pointer=[currentPCB + 15 + filedescriptor * 2];
	if(pointer ==-1) then
		[physicalSP -2] =-1;
		ireturn;
	endif;
	[FILE_TABLE + pointer*2 + 1] = [FILE_TABLE + pointer*2 + 1] -1;
	if([FILE_TABLE + pointer*2 + 1]==0) then
		[FILE_TABLE + pointer*2 ] = -1;
	endif;
	
	[currentPCB + 15 + filedescriptor * 2]=-1;
	[currentPCB + 15 + filedescriptor * 2 + 1]=-1;
		
	
	[physicalSP-2]=0;
    	ireturn;
endif;
